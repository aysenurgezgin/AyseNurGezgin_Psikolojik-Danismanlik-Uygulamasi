// <auto-generated />
using System;
using FriendlyCode.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FriendlyCode.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("FriendlyCode.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(6170),
                            Description = "Birebir kategori",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(6184),
                            Name = "Birebir",
                            Url = "birebir"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(6186),
                            Description = "Grup kategorisi",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(6186),
                            Name = "Grup",
                            Url = "grup"
                        });
                });

            modelBuilder.Entity("FriendlyCode.Entity.CategoryTrainer", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("CategoryTrainers", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 3
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 4
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 4
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 5
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 5
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 6
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 6
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 7
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 7
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 8
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 8
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 9
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 9
                        },
                        new
                        {
                            CategoryId = 1,
                            TrainerId = 10
                        },
                        new
                        {
                            CategoryId = 2,
                            TrainerId = 10
                        });
                });

            modelBuilder.Entity("FriendlyCode.Entity.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Trainers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7517),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7519),
                            Name = "Engin Niyazi Ergül",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Çıktığınız bu yolda yanlız olmadığınızı hissetiren bir kişi.",
                            Url = "engin-niyazi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7522),
                            ImageUrl = "2.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7522),
                            Name = "Aylin Gezer",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Mantığınızla duygularınız arasında karar vermenize yardımcı olacak bir kişi.",
                            Url = "aylin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7524),
                            ImageUrl = "3.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7525),
                            Name = "Mert Güneş",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "İş seçiminde ve iş hayatınızda size yardımcı olacak bir kişi.",
                            Url = "mert"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7526),
                            ImageUrl = "4.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7527),
                            Name = "Asya Gümüş",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Aile hayatınızda çıkmazlara geldiğinizi hissettiğinizde yardımcı olacak bir kişi.",
                            Url = "asya"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7528),
                            ImageUrl = "5.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7529),
                            Name = "Erkan Kocakaya",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Sağlıklı şekilde spor ve hayat çizgisinde kalmanızı sağlayacak bir kişi.",
                            Url = "erkan"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7530),
                            ImageUrl = "6.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7531),
                            Name = "Merve Karadağlı",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Üniversiteye hazırlık döneminde ki gençlerimize sağlıklı yön verecek bir kişi.",
                            Url = "merve"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7532),
                            ImageUrl = "7.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7533),
                            Name = "Elif Buse Meriç",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Çift terapisti olarak sizi dinleyen ve çözüm bulacak bir kişi.",
                            Url = "elif-buse"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7534),
                            ImageUrl = "8.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7535),
                            Name = "Ahmet Toprak",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Felsefik ya da farklı açıdan kendi çıkmazlarınız da yanınızda olacak bir kişi.",
                            Url = "ahmet"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7536),
                            ImageUrl = "9.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7537),
                            Name = "Kemal Sevim",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Aile içe huzursuzluklarda ve anlaşmazlıklarda sizi yanlız bırakmayacak bir kişi.",
                            Url = "kemal"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7538),
                            ImageUrl = "10.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 26, 19, 19, 49, 280, DateTimeKind.Local).AddTicks(7539),
                            Name = "Emine Hakyemez",
                            Price = "Ücreti merkezimize geldiğiniz de konuşmayı çok isteriz",
                            Properties = "Evlatlarınızla daha iyi bir iletişim sağlamada size yardımcı olacak bir kişi.",
                            Url = "emine"
                        });
                });

            modelBuilder.Entity("FriendlyCode.Entity.CategoryTrainer", b =>
                {
                    b.HasOne("FriendlyCode.Entity.Category", "Category")
                        .WithMany("CategoryTrainers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendlyCode.Entity.Trainer", "Trainer")
                        .WithMany("CategoryTrainers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("FriendlyCode.Entity.Category", b =>
                {
                    b.Navigation("CategoryTrainers");
                });

            modelBuilder.Entity("FriendlyCode.Entity.Trainer", b =>
                {
                    b.Navigation("CategoryTrainers");
                });
#pragma warning restore 612, 618
        }
    }
}
